# -*- coding: utf-8 -*-
"""03252024.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sbojJUNjYSKFfMhUDJPF1RGaowuKsF5J

# Working with SQLite databases in Google CoLab
"""

'''
Create an empty SQLite database
'''
import sqlite3

connection = sqlite3.connect('mydb.db')
db = connection.cursor()

# <<< After running this, check the files folder,
# you should see the mydb.db file. That's your
# empty database.
# Remember you might need to right-click and Refresh the Files list

'''
Next, let's create a table to store recordsd of people, including their
names and ages in the database
'''
db.execute('''CREATE TABLE people (id INTEGER PRIMARY KEY, name TEXT, age INTEGER)''')

from google.colab import drive
drive.mount('/content/drive')

'''
To confirm the table was created, let's print a list of all tables in the database.
We do this by querying a special table called sqlite_master
'''
db.execute("SELECT name FROM sqlite_master WHERE type='table';")
tables = db.fetchall()
print("List of Tables\n" + "-" * 40)
for table in tables:
    print(table[0])

'''
Now let's insert one person record into the people table.
'''
db.execute("INSERT INTO people (name, age) VALUES ('John Doe', 30)")
connection.commit()

'''
Then let's query the people table to list all records in the table
'''
db.execute("SELECT * FROM people")
print(db.fetchall())

# Should see one record listed

'''
We can also insert multiple records at once using a Python list ...
'''
persons = [('Jane Doe', 25), ('Mike Johnson', 45), ('Emily Smith', 22)]
db.executemany("INSERT INTO people (name, age) VALUES (?, ?)", persons)
connection.commit()

'''
Let's query the people table to list all records in the table again ...
'''
db.execute("SELECT * FROM people")
print(db.fetchall())

# Now we would see multiple records

'''
We can also prompt the user for new records to add to a table ...
'''
while True:
    # Prompt the user for name and age
    name = input("Enter name (or press Enter to quit): ").strip()
    if not name:  # Exit the loop if no name is entered
        break
    try:
        age = int(input("Enter age: ").strip())  # Ensure age is an integer
    except ValueError:  # Handle the case where age is not an integer
        print("Please enter a valid age.")
        continue
    # Insert the name and age entered by the user into the database
    db.execute("INSERT INTO people (name, age) VALUES (?, ?)", (name, age))
    connection.commit()  # Commit changes after each insert
    print(f"Added {name} with age {age} to the database.")
print("Done")

'''
Let's query the people table to list all records in the table again,
this time we'll format it a bit better ...
'''
db.execute("SELECT * FROM people")
records = db.fetchall()

# Print column headers
print(f"{'ID':<5} {'Name':<20} {'Age':<5}")
print("-" * 40)

for record in records:
    id, name, age = record
    print(f"{id:<5} {name:<20} {age:<5}")

'''
We can also insert new records into the table by importing them
from a CSV file.

For this example you'll need to uploade the people.csv example file
'''
import csv

# Open the CSV file and insert data into the database
with open('people.csv', 'r') as csvfile:
    csvreader = csv.reader(csvfile)
    next(csvreader, None)  # Skip the header row
    for row in csvreader:
        db.execute("INSERT INTO people (name, age) VALUES (?, ?)", row)

# Commit changes
connection.commit()

'''
Let's query the people table again,
'''
db.execute("SELECT * FROM people")
records = db.fetchall()

# Print column headers
print(f"{'ID':<5} {'Name':<20} {'Age':<5}")
print("-" * 40)

for record in records:
    id, name, age = record
    print(f"{id:<5} {name:<20} {age:<5}")

'''
Now that we have a populated database we can use it in various ways.
For example, we can create a data visualization of the data, in
this case, let's create a chart of all of the people and their ages
'''
import matplotlib.pyplot as plt

# Query names and ages
db.execute("SELECT name, age FROM people")
people = db.fetchall()

# Extract data for plotting
names = [person[0] for person in people]
ages = [person[1] for person in people]

# Create a bar chart
plt.figure(figsize=(10, 6))
plt.bar(names, ages, color='skyblue')
plt.xlabel('Name')
plt.ylabel('Age')
plt.title('Age of People')
plt.xticks(rotation=90)
plt.show()

'''
Database queries can help us do things like sort and filter data
by using the database's internal capabilities rather than having
to write additional Python code to do these tasks. For example,
we'll create the same chart, but we'll use the database to sort
the data by age first.
'''
import matplotlib.pyplot as plt

# Query names and ages

# The only change to this code compared to the previous
# chart example is adding a simple sort clause to our
# database query ... "ORDER BY age"
db.execute("SELECT name, age FROM people ORDER BY age")

people = db.fetchall()

# Extract data for plotting
names = [person[0] for person in people]
ages = [person[1] for person in people]

# Create a bar chart
plt.figure(figsize=(10, 6))
plt.bar(names, ages, color='skyblue')
plt.xlabel('Name')
plt.ylabel('Age')
plt.title('Age of People')
plt.xticks(rotation=90)
plt.show()

'''
We can also filter data, that is, SELECT only records that
match a criteria, such as people who are 40 or over ...
'''
import matplotlib.pyplot as plt

# Query names and ages

# We added "WHERE age >= 40" to our database query ...
db.execute("SELECT name, age FROM people WHERE age >= 40 ORDER BY age")

people = db.fetchall()

# Extract data for plotting
names = [person[0] for person in people]
ages = [person[1] for person in people]

# Create a bar chart
plt.figure(figsize=(10, 6))
plt.bar(names, ages, color='skyblue')
plt.xlabel('Name')
plt.ylabel('Age')
plt.title('Age of People')
plt.xticks(rotation=90)
plt.show()